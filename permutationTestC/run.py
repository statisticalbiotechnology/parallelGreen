#from cmath import factorial
""" from permutationTestC import GrennPdistOpenMP, GrennPdist, coinShiftPdist """
from permutationTest import coinShiftInt, GreenInt, GreenFloat, GreenFloatCuda, coinShiftFloat
import numpy as np
import time



""" def getDataCoinShift(A,B):
    scores = np.concatenate((A,B))
    n = scores.shape[0]
    m = A.shape[0]

    add = np.min(scores - 1)
    scores = scores - add

    m_b = sum(np.sort(scores)[(n - m) :n])

    score_a = np.ones(n, dtype=np.int32)


    im_a = m
    im_b = m_b

    return score_a,scores,im_a, im_b 

def getDataGreen(A,B):
      x = A
      y = B
      m = x.shape[0]
      n = y.shape[0]
      
      z = np.concatenate((A,B))
      z.sort()
      S = z[m:].sum()
      
      return z, m, n, S """

""" A = np.array([169,  16, 494,  73,  23, 300, 467,  76, 361, 264, 163, 434,  96,
        76, 214,  48, 320, 288, 219, 405, 125, 117, 294, 168, 196, 103,
       261, 427, 364,  52, 360,  39, 491,  34,  59, 381, 256, 324, 326,
        89, 197, 303, 455, 352, 212, 122,  32, 451,  81,  53, 239, 461,
        51, 133, 219, 320, 208,  50, 296, 431, 137, 435, 494, 272, 234,
       494, 393, 248, 402, 407, 249, 374,  74, 186, 362, 367, 253, 475,
       447,  84,  97,  44, 289,  27, 499, 393,  77, 255, 139, 297,  35,
       317, 138, 247, 486, 327,  87, 455,  20,  57, 467, 386, 325, 169,
        82,  62, 455, 126, 486,  98, 403, 469, 475, 344, 407, 300, 309,
       230, 459, 457, 219, 484, 476, 225,  17, 312, 124, 150,  44, 478,
       209, 425, 327, 203, 422,  60, 274, 144, 159, 462,  27, 296, 492,
       320, 240, 149, 407, 188, 178, 357, 251, 256,  28,   1,  63, 425,
       443, 246,  93, 293,  64,  76, 111,  51, 202, 136, 434, 250, 339,
       386, 208, 220, 239, 225, 488,  50, 297, 365,  47, 444, 330, 492,
        79, 479, 111,  96, 289, 376, 273, 406, 428,  59, 483,  22, 235,
       434, 192, 212, 349,  52,  98,   9, 108,  87,  89, 368, 140, 258,
       428, 198, 316,  64, 136, 337, 362, 349, 208, 123, 146, 422, 314,
       416, 291, 465, 299,  49,  37,  23,  20,  96, 402,  46, 329, 294,
        10, 150, 421, 243, 424, 489, 488, 340, 347,  37, 297, 359,  20,
       185, 393, 381, 207, 374,  50,  52, 116, 412, 196,  80, 387, 279,
       262, 134, 211, 358, 350, 141, 221, 391, 114,  45,   6, 401, 198,
       309, 377, 319, 411, 340, 360, 102, 154, 126,  37, 144, 214, 275,
       279,  94, 271,  65, 454,  88, 290, 359,  72,  97, 498,  83, 478,
        80, 494, 413, 405, 347, 209, 263, 423, 409, 254, 391, 428, 186,
       406, 242, 342, 106, 165, 234,  64, 105, 212,   5, 311, 253, 419,
       123, 461, 256, 464, 112,  40, 191,  86, 258, 436, 302, 157, 280,
       165, 338, 211,  93,  92, 244, 363, 423,  75, 283, 447, 238,  34,
       387, 444,  58, 423, 225, 128, 470, 461, 383,  20, 182,  83, 379,
         9,  12, 426, 443, 408, 284, 187, 116, 317, 145, 261, 304, 333,
       375, 190,  99, 280, 106, 404, 354, 288,  82, 218, 202, 188, 385,
         9, 369, 395, 265, 230, 100, 246, 361, 175, 292, 463, 208, 311,
       306, 365,   7, 482,  99,  96,  50, 414, 163, 439, 119, 188, 354,
       356, 270, 379, 397, 304, 340, 494, 187, 429, 253, 451, 416,  36,
       307, 253,  91, 395, 220, 255, 171, 300, 164,  43, 260,  94, 449,
       493, 390, 139,  12, 351, 107, 338, 211, 450, 384,  87, 419, 399,
       495, 498, 493, 484, 239, 112, 215, 286, 148, 170, 321, 351, 229,
       355, 396, 120, 278, 278,  28, 381, 468, 202,  18, 425,  80, 496,
       267, 434, 197, 231, 270, 287, 467, 391, 216,  22, 219, 337, 146,
       384, 422,  71,  58, 127,  30
       ],dtype=np.int32)
B = np.array([176, 185, 163, 279, 364, 257, 407, 155, 385, 325, 436, 180, 152,
       176, 192, 413, 465, 496, 330, 499, 431, 191, 115, 235, 116,  55,
       209,  55,  49, 308, 136,  52, 105, 125, 192, 321, 473, 381, 374,
       248, 438, 376, 178, 332, 304, 145, 167, 431,  60, 344, 217, 309,
        26,   3, 255,  72, 294,  10, 267, 468,  55, 141,  96,   5, 449,
       480, 359, 155, 203,  79, 370, 384, 361,  15,  70, 370, 145, 255,
       476,   6, 481, 202,   9, 115, 271, 119, 461, 348, 426, 256,  94,
        48,  74, 169, 243,  77, 354, 338, 451, 239, 255, 355, 189, 215,
       223, 248, 490, 396, 217, 272, 340,  92,  26, 101, 174, 201, 293,
       417, 353, 476, 389, 269,  24, 382, 134, 218, 243,  95, 347,  42,
       151, 225, 244, 444,  28, 295,  25,  51, 155, 349, 416, 242, 225,
       168, 300, 174, 126, 134, 264, 224, 263, 330, 340, 145, 149, 202,
       113, 243, 412, 465, 236, 459, 160,  77, 111, 394, 277, 104, 245,
       407, 390, 266,  22,  29, 374, 426, 435, 247, 240, 303, 235, 211,
       378,  53, 225, 202, 361,  67, 450, 379, 359, 146,  26,  36, 282,
        99, 451, 235, 137, 195,  54, 403, 379, 250, 471,  39,   6, 417,
       342,  80, 139, 315, 132, 395, 298, 113, 408, 215, 301, 416, 363,
       166, 136, 353,  61,  80, 402, 490, 140, 354, 156, 135, 241, 115,
       402, 160,   7, 390, 141, 326, 351, 118, 409, 266, 491, 238, 162,
       181, 162, 124, 358, 174, 315, 447, 218, 106, 262,  52, 172, 269,
       222, 321, 388, 326, 378, 264, 121, 167, 226, 387,  65, 286, 462,
       124, 378, 207,  77, 290,  49, 114,  53,  51, 329, 223, 322,  42,
       297, 343, 446, 391, 421, 270, 430, 131, 191, 387,   4, 223, 267,
       448, 152, 373, 468, 145, 383, 335, 447, 163, 384, 157, 382, 146,
       454, 211, 451,  33, 372, 445, 204,   6, 226, 329, 499, 393,  50,
       145, 122,  30,  51, 477, 374, 307, 229, 215,  22, 484,   7,  79,
       190, 490,  52, 128, 204,  17, 301, 141, 409,  59, 229, 177, 179,
        93, 382,  50, 246,  54, 475, 397, 373,  41, 160, 217, 345, 327,
       150, 489, 464,  56, 341, 354, 354, 269, 211, 136, 490, 215, 169,
        27,  74, 295, 368,  56, 360, 424, 196, 460, 222, 300, 414,  28,
       367, 395, 217,  43, 300,  37, 305, 154, 309, 347, 300, 341, 371,
       417, 133, 211, 347, 182,  54, 235, 354, 109,  65, 304, 209, 425,
        50, 482, 448,  13, 379,  43,   4,  17,   3,  73,  26, 481, 182,
       339, 234,  40, 489, 131,  52, 221, 483, 435,  58, 345, 112, 164,
        65, 127, 112,  91, 130, 239, 255, 456,  25, 118, 495, 145, 104,
        27, 309, 476, 460,  35, 249, 484,  14, 413, 211, 276, 178, 120,
        84, 128, 203, 470, 328,  77, 283, 175, 128, 205, 280, 410, 117,
       199,  36,   5, 476, 137,   4, 314, 391, 432, 470, 496, 258, 126,
       334, 169, 355, 158, 249, 459],dtype=np.int32) """

np.random.seed(15)
n = 100
m = n
n_samples = 500
A = np.asarray([np.random.randint(0,n,m,dtype=np.int32) for _ in range(n_samples)])
B = np.asarray([np.random.randint(0,n,n,dtype=np.int32) for _ in range(n_samples)])

A,B = A[0], B[0]


start = time.time()
d4 = coinShiftInt(A,B)
end = time.time()
""" print(end - start) """

print(d4)

start = time.time()
d5 = GreenInt(A,B)
end = time.time()
""" print(end - start) """

print(d5)


start = time.time()
d5 = GreenInt(A,B, multiThread=True)
end = time.time()
""" print(end - start) """

print(d5)

start = time.time()
d5 = GreenFloat(A,B, n, multiThread=True)
end = time.time()
""" print(end - start) """

print(d5)


start = time.time()
d5 = GreenFloatCuda(A,B, n)
end = time.time()
""" print(end - start) """

print(d5)



start = time.time()
d5 = coinShiftFloat(A,B, n)
end = time.time()
""" print(end - start) """

print(d5)